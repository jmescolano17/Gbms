@inject HttpClient Http
@inject ISnackbar Snackbar
@using System.Net.Http.Headers
@using Gbms.Models;
@inject ILocalStorageService localStorage
@inject NavigationManager Nav
@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        <div class="container">
            <div class="row">
                <div class="col-sm-6">
                    <MudTextField Clearable @bind-Value="@_blotter.case_no" ReadOnly Label="Case #" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>

                    <MudAutocomplete Clearable T="residents" Label="Search Complainant Name" @bind-Value="_complainant" Variant="Variant.Text" Margin="Margin.Dense"
                                     SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.fullname}")" Strict="false">
                    </MudAutocomplete>
                    @if (_hide)
                    {
                        <MudTextField Clearable @bind-Value="@_complainant.res_id" Label="Complainant ID" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true"></MudTextField>
                    }

                    <MudAutocomplete Clearable T="residents" Label="Search Respondent Name" @bind-Value="_respondent" Variant="Variant.Text" Margin="Margin.Dense"
                                     SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.fullname}")" Strict="false">
                    </MudAutocomplete>

                    @if (_hide)
                    {
                        <MudTextField Clearable @bind-Value="@_respondent.res_id" Label="Respondent ID" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true"></MudTextField>
                    }

                    <MudTextField Clearable @bind-Value="@_blotter.title" Label="Title" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField> <br />
                    <MudTextField Clearable T="string" @bind-Value="@_blotter.details" Label="Details" Lines="5" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </div>

                <div class="col-sm-6">

                    <MudTextField Clearable @bind-Value="@_blotter.rdate" Label="Reported Date" Variant="Variant.Text"
                                  Margin="Margin.Dense" InputType="InputType.Date" Format="yyyy-MM-dd"></MudTextField>
                    <MudTextField Clearable @bind-Value="@_blotter.sched" Label="Schedule Date" Variant="Variant.Text"
                                  Margin="Margin.Dense" InputType="InputType.Date" Format="yyyy-MM-dd"></MudTextField>
                    @*<MudTextField Clearable ReadOnly @bind-Value="@_blotter.fee" Label="Fee" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>*@
                    <MudTextField Clearable @bind-Value="@_blotter.receipt" Label="Receipt #" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                    <MudSelect @bind-Value="@_blotter.status" Margin="Margin.Dense" T="string" Label="Status" Variant="Variant.Text">
                        <MudSelectItem Value="@("Pending")" />
                        <MudSelectItem Value="@("Resolved")" />
                    </MudSelect>
                    <br /><br />
                    <MudToolBar>
                        <MudSpacer />
                        <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Primary" @onclick="Cancel">Cancel</MudButton>&nbsp;
                        <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Tertiary" @onclick="Save">Save</MudButton>
                    </MudToolBar>
                </div>
            </div>
        </div>
        <br />
        <br />
    </DialogContent>
</MudDialog>

@code {
    private bool _hide = false;
    [Parameter]public residents _complainant { get; set; } = new residents();
    [Parameter] public residents _respondent { get; set; } = new residents();

    private async Task<IEnumerable<residents>> Search(string value)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("token"));
        var residents = await httpClient.GetFromJsonAsync<List<residents>>($"api/Residents/SearchResidents?search={value}");
        return residents;

    }

    DateTime? date = DateTime.Today;
    [Parameter] public blotter _blotter { get; set; } = new blotter();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private string GetId(string id)
    {
        string alphanumeric = new string(id.Where(c => Char.IsLetterOrDigit(c)).ToArray());
        int hashCode = alphanumeric.GetHashCode();
        return $"{hashCode:X}";
    }

    public string ArNumber
    {
        get { return _blotter.case_no; }
        set { _blotter.case_no = value; }
    }

    private async Task GenerateRandomNumber()
    {
        Random random = new Random();
        int randomNumber = random.Next(10000, 99999);
        _blotter.case_no = randomNumber.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        await GenerateRandomNumber();
    }



    public async Task Save()
    {
        int i = 0;
        var xblotter = new blotter
            {
                type = _blotter.type,
                blotter_id = _blotter.blotter_id,
                case_no = _blotter.case_no,
                res_id_c = _complainant.res_id,
                complainant = _complainant.fullname,
                res_id_r = _respondent.res_id,
                respondent = _respondent.fullname,
                title = _blotter.title,
                details = _blotter.details,
                rdate = _blotter.rdate,
                sched = _blotter.sched,
                fee = _blotter.fee = "85",
                receipt = _blotter.receipt,
                status = _blotter.status
            };

        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            var json = JsonConvert.SerializeObject(xblotter);
            HttpContent content = new StringContent(json);
            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("token"));
            HttpResponseMessage response = await client.PostAsync($"api/Blotter/UpdateBlotter", content);
            if (response.IsSuccessStatusCode)
            {
                string contentresponse = await response.Content.ReadAsStringAsync();
                i = JsonConvert.DeserializeObject<int>(contentresponse);
                if (i > 0)
                {
                    await InvokeAsync(async () =>
                    {
                        Snackbar.Add($"Done: Successfully Saved!", Severity.Success);
                        MudDialog.Cancel();
                        await InvokeAsync(StateHasChanged);
                    });
                }
            }
            else
            {
                await InvokeAsync(() =>
                {
                    Snackbar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                    StateHasChanged();
                });
            }
        }
    }

}
